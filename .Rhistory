dates0 <- as.Date(as.character(dates2), "%Y%m%d")
dates0 <- as.Date(as.character(dates0), "%Y%m%d")
x0sub <- pm0sub$Sample.Value
plot(dates0,x0sub)
par(mfrow = c(1,2), mar = c(4,4,2,1))
plot(dates0, x0sb, pch = 20)
plot(dates0, x0sub, pch = 20)
abline(h = mean(x0sub))
abline(h = median(x0sub))
plot(dates1, x1sub, pch = 20)
abline(h = median(x1sub))
abline(h = median(x1sub, na.rm = T))
plot(dates0, x0sub, pch = 20)
abline(h = median(x0sub,na.rm = TRUE))
plot(dates1, x1sub, pch = 20)
abline(h = median(x1sub, na.rm = T))
range(x0sub, na.rm = T)
rge <- range(x0sub, na.rm = T)
plot(dates0, x0sub, pch = 20, ylim = rge)
abline(h = median(x0sub,na.rm = TRUE))
abline(h = mean(x0sub,na.rm = TRUE), lty = 2, col = "blue")
plot(dates1, x1sub, pch = 20, ylim = rge)
abline(h = median(x1sub,na.rm = TRUE))
abline(h = mean(x1sub,na.rm = TRUE), lty = 2, col = "blue")
mn0 <- with(pm0, tapply(Sample.Value,State.Code,mean,na.rm = T))
View(mn0)
table(pm0$State.Code)
mn1 <- with(pm1,tapply(Sample.Value, State.Code, mean, na.rm = T))
d0 <- dataframe(state = names(mn0), mean = mn0)
d0 <- data.frame(state = names(mn0), mean = mn0)
d1 <- data.frame(state = names(mn1), mean = mn1)
head(d0)
merge(d0,d1, by = "state")
mrg <- merge(d0,d1, by = "state")
with(mrg, plot(mean.x,mean.y))
with(mrg, plot(mean.y))
dim(mrg)
with(mrg,plot(rep(1999,52),mrg[,2],xlim = c(1998,2013)))
with(mrg,plot(rep(2012,52),mrg[,3],xlim = c(1998,2013)))
with(mrg,plot(rep(1999,52),mrg[,2],xlim = c(1998,2013)))
with(mrg,points(rep(2012,52),mrg[,3],xlim = c(1998,2013)))
range(mrg$mean.x)
range(mrg$mean.y)
with(mrg,plot(rep(1999,52),mrg[,2],xlim = c(1998,2013), ylim = c(4,20)))
with(mrg,points(rep(2012,52),mrg[,3],xlim = c(1998,2013), ylim = c(4,20)))
?segments
segments(rep(1999,52),mrg[,2],rep(2012,52),mrg[,3])
library(swirl)
swirl()
dim(ssd)
names(sdd[,c(562,563)])
names(ssd[,c(562,563)])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, subject == 1)
dim(sub1)
names(sub1)[1:12]
myedit("showXY.R")
showMe(1:6)
mdist <- sub1[,1:3]
mdist <- dist(sub1[,1:3)]
mdist <- dist(sub1[,1:3])
class(sub1)
class(mdist)
mdist
length(mdist)
dim(mdist)
attributes(mdist)
View(mdist)
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist <- dist(sub1[,10:12])
hclustering <- cluster(mdist)
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
scale(sub1[,-c(562,563)])
?scale
svd1 <- scd(scale(sub1[,-c(562,563)]))
svd1 <- svd(scale(sub1[,-c(562,563)]))
View(svd1)
dim(svd1$u)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
class(sub1)
class(sub1[maxCon])
class(maxCon)
View(sub1)
View(sub1[maxCon])
play()
View(sub1)
View(sub1)
a <- data.frame(x = 1:10, y = 21:30, c = LETTERS[1:10])
a[1]
a[2]
a[3]
nxt()
sub1[maxCon]
names(sub1[maxCon])
kClust <- kmeans(sub1[,-c(562,563)])
kClust <- kmeans(sub1[,-c(562,563)],centers = 6)
kClust$cluster, sub1$activity
table(kClust$cluster, sub1$activity)
?kclust
?kmean
?kmeans
kClust <- kmeans(sub1[,-c(562,563)],centers = 6, nstart = 100)
View(kClust)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying <- which(kClust$size == 29)
plot(kClust$centers[laying,1:12], pch = 19, ylab = "Laying Cluster")
play()
View(kClust$centers)
dim(sub1)
table(kClust$cluster)
nxt()
names(sub1[1:3])
head(which(kClust$size == 49))
walkdown <- which(kClust$size==49)
plot(kClust$center[walkdown,1:12], pch = 19, ylab = "Walkdown Cluster")
plot(kClust$centers[walkdown,1:12], pch = 19, ylab = "Walkdown Cluster")
swirl()
swirl()
dim(ssd)
names(ssd[562:563])
table(ssd$subject)
sum(table(ssd$subject)))
sum(table(ssd$subject))
table(ssd$activity)
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
library(swirl)
swirl()
bye()
swirl()
dim(pm0)
head(pm0)
cnames
strsplit(cnames, sep = "|", fixed = T)
?strsplit
strsplit(cnames, split = "|", fixed = T)
cnames <- strsplit(cnames, "|", fixed = T)
cnames
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
x0 <- pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(p1) <- make.names(cnames[[1]][wcol])
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <- pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0,x1)
boxplot(log10(x0),log10(x1))
negative <- x1<0
sum(negative, na.rm = T)
sum(negative, na.rm = TRUE)
mean(negative, na.rm = TRUE)
dates <- pm1$Date
str(dates)
dates <- as.Date(as.character(dates), "%Y%m%d")
head(dates)
hist(dates(negative), "month")
hist(dates[negative], "month")
str(site0)
intersect(site0,site1)
both <- intersect(site0,site1)
both
head(pm0)
cnt0 <- subset(pm0, State.Code == 36 & county.site %>% both)
cnt0 <- subset(pm0, State.Code == 36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code == 36 & county.site %in% both)
sapply(split(cnt0, cnt$county.site))
sapply(split(cnt0, cnt$county.site), nrow)
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm0sub <- subset(cnt0, county.site == 63.2008)
pm0sub <- subset(cnt0, County.Code==63 & Site.ID==2008)
pm1sub <- subset(cnt1, County.Code==63 & Site.ID==2008)
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.Date(as.character(pm0sub$Date), "%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date), "%Y%m%d")
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
mrg[mrg$mean.x < mrg$mean.y,]
segments(rep(1,52),mrg[c(6,23,27,33),2],rep(2,52),mrg[c(6,23,27,33),3], col = "light blue", lwd = 2)
segments(rep(1,52),mrg[c(6,23,27,33),2],rep(2,52),mrg[c(6,23,27,33),3], col = "blue", lwd = 2)
library(swirl)
swirl()
dist(dataFrame)
hclust(distxy)
hc <- hclust(distxy)
class(hc)
View(hclust)
View(hc)
plot(hc)
plot(as.dendrogram(hc))
abline(h = 1.5, col = "blue")
abline(h = 4, col = "red")
abline(h = .4, col = "red")
5
abline(h = .05, col = "red")
12
abline(h = .05, col = "green")
dist(dFsm)
hc
heatmap(dataMatrix, col = cm.colors(25))
heatmap(mt)
mt
class(denmt)
plot(denmt)
distmt
library(swirl)
swirl())
swirl()
cmat
points(cmat[1,],cmat[2,], col = c("red","orange","purple"), pch = 3, lwd = 2)
points(cmat[1,],cmat[2,], col = c("red","orange","purple"), pch = 3, cex=2, lwd = 2)
points(cx,cy, col = c("red","orange","purple"), pch = 3, cex=2, lwd = 2)
?dist
View(mdist)
mdist(x,y,cx,cy)
apply(distTmp, 2, which.min)
points(x, y, pch = 19, cex = 2, col = cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col = cols1, pch = cols1, pch = 8, cex =2, lwd = 2)
points(newCx, newCy, col = cols1, col = cols1, pch = 8, cex =2, lwd = 2)
points(newCx, newCy, col = cols1, pch = 8, cex =2, lwd = 2)
mdist(x, y, newCx, newCy)
apply(distTmp2, 2, which.min)
points(x, y, pch = 19, cex = 2, col = cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy, col = cols1, pch = 9, cex = 2, lwd = 2)
?kmeans
kmeans(dataFrame, centers = 3)
kmObj$iter
points(x, y, col = kmObj$cluster, pch = 19, cex = 2)
points(x,y,col=kmObj$cluster,pch=19,cex=2)
plot(x,y,col=kmObj$cluster,pch=19,cex=2)
View(hcluster)
View(kmObj)
points(kmObj$centers,col=c("black","red","green"),pch=3,cex=3,lwd=3)
dm <- data.matrix(a = rnorm(10000), b = rnorm(10000,100,20), c = rnorm(10000,200,10), d = rnorm(10000,300,1))
dm <- data.frame(a = rnorm(10000), b = rnorm(10000,100,20), c = rnorm(10000,200,10), d = rnorm(10000,300,1))
heatmap(dm)
heatmap(data.matrix(dm))
swirl()
swirl()
swirl()
swirl()
swirl()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
plot(x, y, col = kmeans(data.Frame,6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame,6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame,6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame,6)$cluster, pch = 19, cex = 2)
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R", local =TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu %*% t(matv)
matu %*% diag %*% t(matv)
scale(mat)
svd(scale(mat))
prcomp(scale(mat))
swirl()
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2$svd
svd2$v[,1:2]
svd2
svd2$d
dim(faceData)
svd1$d[1]
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
myImage(a1)
windows()
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
skip()
?
?a
?a
myImage(a2)
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
?.dot
?dplyr
library(dplyr)
?dplyr
help(package= "dplyr")
getwd()
library(readr)
ozone <- read_csv("Course 4 - Exploratory Data Analysis/hourly_44201_2014.csv", col_types = "ccccinnccccccncnncccccc")
23*7147884*8
names(ozones)
names(ozone)
names(ozone) <- make.names(names(ozone))
names(ozone)
dim(ozone)
str(ozone)
table(ozone$Time.Local)
library(dplyr)
filter(ozone, Time.Local == "00:01") %>% select(State.Name, County.Name, Date.Local, Time.Local, Sample.Measurement)
filter(ozone, Date.Local == "2014-09-30" & State.Code == "36" & County.Code == "033") %>% select(Date.Local, Time.Local, Sample.Measurement)
filter(ozone, Date.Local == "2014-09-30" & State.Code == "36" & County.Code == "033") %>% select(Date.Local, Time.Local, Sample.Measurement) %>% as.data.frame
select(ozone, State.Name) %>% unique %>% nrow
unique(ozone$State.Name)
summary(ozone$Sample.Measurement)
quantile(ozone$Sample.Measurement,seq(0,1,0.1))
?quantile
ranking <- group_by(ozone, State.Name, County.Namme) %>%
summarize(ozone = mean(Sample.Measurement)) %>%
as.data.frame %>%
arrange(desc(ozone))
ranking <- group_by(ozone, State.Name, County.Name) %>%
summarize(ozone = mean(Sample.Measurement)) %>%
as.data.frame %>%
arrange(desc(ozone))
View(ranking)
head(ranking,10)
tail(ranking,10)
smoothScatter(rnorm(10000),rnorm(10000))
smoothScatter(rnorm(10000),rnorm(10000))
install.packages("kernlab")
library(kernlab)
data(spam)
set.seed(3435)
dim(spam)
str(spam)
summary(spam[1:10])
missing <-  apply(is.na(spam),2,mean)
sum(misisng)
sum(missing)
trainIndicator <- rbinom(4601, size = 1, prob = 0.5)
table(trainIndicator)
trainSpam <- spam[trainIndicator == 1,]
testSpam <- spam[trainIndicator == 0, ]
head(names(trainSpam),20)
head(trainSpam[,1:10])
table(trainSpam$type)
str(trainSpam$capitalAve)
boxplot(capitalAve ~ type, data = trainSpam)
summary(trainSpam$capitalAve)
summary(trainSpam$type)
boxplot(log10(capitalAve) ~ type, data = trainSpam)
par(mar = c(4,4,0.5,0.5))
boxplot(log10(capitalAve) ~ type, data = trainSpam)
names(trainSpam[,1:4])
summary(trainSpam[1:4])
pairs(log10(trainSpam[1:4] + 1))
par(mar = c(2,2,1,1))
pairs(log10(trainSpam[1:4] + 1))
par(mar = c(4,4,0.5,0.5))
?t
View(t(trainSpam[,1:10]))
View(trainSpam[,1:10])
identical(t(trainSpam)[1,],trainSpam[,1])
dim(trainSpam)
dim(t(trainSpam))
identical(t(trainSpam)[,1],trainSpam[1,])
a <- dist(trainSpam[,1:57])
b <- dist(t(trainSpam[,1:57]))
class(a)
class(b)
View(a)
View(b)
hClustera <- hclust(a)
hClusterb <-hclust(b)
plot(hClustera)
plot(hClusterb)
dataMatrix <- matrix(rnorm(400), nrow = 40)
image(1:10, 1:40)
e
?image
image(dataMatrix)
image(t(dataMatrix))
image(1:10, 1:40, t(dataMatrix))
image(1:10, 1:40, t(dataMatrix)[,nrow(dataMatrix):1])
hClusterUpdated <- dist(t(log10(trainSpam[,1:57])))
plot(hClusterUpdated)
hClusterUpdated <- dist(t(log10(trainSpam[,1:57]+1)))
plot(hClusterUpdated)
hClusterUpdated <- hclust(dist(t(log10(trainSpam[,1:57]+1))))
plot(hClusterUpdated)
tail(names(trainSpam))
class(trainSpam$type)
attributes(trainSpam$type)
trainSpam$numType <- as.numeric(train.Spam$type) - 1
trainSpam$numType <- as.numeric(trainSpam$type) - 1
table(trainSpam$type)
table(trainSpam$numType)
costFunction <- function(x, y) sum(x != (y > 0.5))
cvError = rep(NA,55)
library(boot)
help(package = "boot")
for (i in 1:55) {
}
for (i in 1:55) {
lmFormula <- reformulate(names(trainSpam)[i], response\
= "numType")
for (i in 1:55) {
lmFormula <- reformulate(names(trainSpam)[i], response = "numType")
glmFit <- glm(lmFormula, family = "binomial", data = trainSpam)
cvError[i] <- cv.glm(trainSpam, glmFit, costFunction,(2)$delta[2])
}
for (i in 1:55) {
lmFormula = reformulate(names(trainSpam)[i], response\
= "numType")
glmFit = glm(lmFormula, family = "binomial", data = t\
rainSpam)
cvError[i] = cv.glm(trainSpam, glmFit, costFunction, \
2)$delta[2]
}
for (i in 1:55) {
lmFormula = reformulate(names(trainSpam)[i], response = "numType")
glmFit = glm(lmFormula, family = "binomial", data = trainSpam)
cvError[i] = cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]}
View(cvError)
names(trainSpam)[which.min(cvError)]
View(glmFit)
predictionModel <- glm(numType ~ charDolar, family = "binnomial", data = trainSpam)
predictionModel <- glm(numType ~ charDolar, family = "binomial", data = trainSpam)
predictionModel <- glm(numType ~ charDollar, family = "binomial", data = trainSpam)
predictionTest <- predict(predictionModel, testSpam)
View(predictionTest)
View(predictionModel$fitted)
predictedSpam = rep("nonspam", dim(testSpam)[1])
predictedSpam[predictionModel$fitted > 0.5] = "spam"
table(predictedSpam, testSpam$type)
smoothsmoothScatter(rnorm(10000), rnorm(10000))
smoothScatter(rnorm(10000), rnorm(10000))
par(mfrow=c(0.5,0.5,0.5,0.5))
par(mar=c(0.5,0.5,0.5,0.5))
smoothScatter(rnorm(10000), rnorm(10000))
par(mar=c(0.1,0.1,0.1,0.1))
smoothScatter(rnorm(10000), rnorm(10000))
